#!/bin/bash
#----------------------------------------------------------------------

set -o errexit
#set -o xtrace

host=$1
chRootRoot=$2
chRootName=$3
reltag=$4
pyver=$5


if [ $buildansi = yes ]; then
    CHARTYPE=both
else
    CHARTYPE=unicode
fi


function TestOnline {
    local host=$1
    local message=$2

    if ping -q -c1 -w1 $host > /dev/null; then
	return 0
    else
	return 1
    fi
}


if [ $skiprpm != yes ]; then
    # We use a chroot environment on the build machine for the debian
    # builds, so this build is pretty simple.  Just copy the tarball
    # and a build script to the build machine, and then run
    # do-build-deb in the chroot.

    if TestOnline $host; then
    
	echo "The $host machine is online, build continuing..."

	echo "Copying source files and build script..."
	ssh root@$host "mkdir -p $chRootRoot/$LINUX_BUILD && rm -rf $chRootRoot/$LINUX_BUILD/*"
	scp $STAGING_DIR/wxPython-src* distrib/all/do-build-rpm $STAGING_DIR/wxPython.spec \
            root@$host:$chRootRoot/$LINUX_BUILD
    
	ssh root@$host "dchroot --chroot $chRootName --directory $LINUX_BUILD \"./do-build-rpm $reltag $skipclean $VERSION $pyver $CHARTYPE\""

	echo "Fetching the results..."
	ssh root@$host "rm $chRootRoot/$LINUX_BUILD/do-build-rpm"
	scp "root@$host:$chRootRoot/$LINUX_BUILD/wxPython*.i[0-9]86.rpm"  $STAGING_DIR
	ssh root@$host "rm $chRootRoot/$LINUX_BUILD/wxPython*.i[0-9]86.rpm"
	echo "Done!"
    else
	echo "The $host machine is **OFFLINE**, skipping the binary RPM build."
	exit 0
    fi
fi

